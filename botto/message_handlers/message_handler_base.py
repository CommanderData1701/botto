# -*- coding: utf-8 -*-
"""Base class for all message handlers."""
from enum import Enum
from typing import Union, Optional

from botto.database import Database
from botto.user import User


class Handler:
    """Base class for all message handlers.

    This class should be inherited by all message handlers. It provides the
    basic structure that all handlers should follow.
    """

    def __init__(self, database: Database) -> None:
        self.database = Database()

    def get_state(self) -> Enum:
        """Returns the current state of the handler.

        Returns:
            Enum: The current state of the handler.
        """
        raise NotImplementedError

    def generate_response(self, message: str) -> str:
        """Generates a response based on the message received.

        Every handler should return a response according to an input message.

        Args:
            message (str): The message received by the handler.

        Returns:
            str: The response generated by the handler.
        """
        raise NotImplementedError

    def __call__(self) -> Optional[dict[str, Union[str, dict[str, User]]]]:
        """Information for round messages.

        This method returns a dictionary containing wether or not additional
        messages have to be sent to other users.

        Returns:
            Optional[dict[str, Union[str, dict[str, User]]]]: A dictionary
                containing information about the round messages. None if no
                additional messages have to be sent.
        """
        raise NotImplementedError
